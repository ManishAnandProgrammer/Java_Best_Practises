Referenced From:: Effective Java Third Edition


Approach_01:
    *   The main advantage of the public field approach is that the API makes it clear
        that the class is a singleton: the public static field is final, so it will always contain
        the same object reference.
    *   The second advantage is that it’s simpler.

Approach_02:
    *   One advantage of the static factory approach is that it gives you the flexibility
        to change your mind about whether the class is a singleton without changing its
        API. The factory method returns the sole instance, but it could be modified to
        return, say, a separate instance for each thread that invokes it.


Approach_03:
    * This approach is similar to the public field approach, but it is more concise,
      provides the serialization machinery for free, and provides an ironclad guarantee
      against multiple instantiation, even in the face of sophisticated serialization or
      reflection attacks. This approach may feel a bit unnatural, but a single-element
      enum type is often the best way to implement a singleton. Note that you can’t
      use this approach if your singleton must extend a superclass other than Enum
      (though you can declare an enum to implement interfaces).